from typing import Tuple, Union

from turtle import Turtle

from lsystem.model.symbol import Symbol
from lsystem.model.word import Word

__all__ = ['LSystemRenderer']


class LSystemState:

    def __init__(self, location: Tuple[int, int], angle: int) -> None:
        self.x = location[0]
        self.y = location[1]
        self.angle = angle


# TODO Map instructions to the symbols of a word generated by lsystem grammar
# TODO Interpret the instructions and use them to draw
# TODO Pushing state of the renderer to the stack

# TODO Shortening of edges with - subsequent steps ?
#                               - branching ?


class LSystemRenderer():

    def __init__(self, starting_state: LSystemState, location_delta: int = None, angle_delta: int = None) -> None:

        self.current_state = starting_state

        self.location_delta = location_delta
        self.angle_delta = angle_delta

        self.state_stack = []

        self.instruction_map = {
            'F': self._move_forward,
            '+': self._turn_right,
            '-': self._turn_left,
            'âˆ’': self._turn_left,
            '[': self._store_state,
            ']': self._load_state,
        }

    def draw(self, turtle_obj: Turtle, word: Union[Symbol, Word]):

        print(word)

        for symbol in word:

            try:
                instruction = self.instruction_map[symbol]
                instruction(turtle_obj)

            except KeyError:
                raise ValueError(
                    f'Invalid instruction mapping for symbol "{symbol}", not recognized.')

    def _move_forward(self, turtle_obj: Turtle) -> None:
        turtle_obj.forward(self.location_delta)

    def _turn_right(self, turtle_obj: Turtle) -> None:
        turtle_obj.right(self.angle_delta)

    def _turn_left(self, turtle_obj: Turtle) -> None:
        turtle_obj.left(self.angle_delta)

    def _store_state(self, turtle_obj: Turtle) -> None:
        self.state_stack.append(self.current_state)

    def _load_state(self, turtle_obj: Turtle) -> None:
        self.current_state = self.state_stack.pop()

        turtle_obj.penup()
        turtle_obj.setposition(self.current_state.x, self.current_state.y)
        turtle_obj.setheading(self.current_state.angle)
        turtle_obj.pendown()
